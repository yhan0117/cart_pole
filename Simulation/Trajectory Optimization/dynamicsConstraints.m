% compiles the dynamics constraints generated by dynamics_constraint_with_derivative.
function [h,dH] = dynamicsConstraints(z, p, c)

    %%%% INPUT
    % z: decision variable vector
    % N: number of sample points
    % nx: dimension of state vector, x
    % nu: dimension of input vector, u
    % dt: time step duration

    %%%% OUTPUT
    % h: collection of h_i at a timestep from dynamics_constraint_with_derivative;
    % (N-1)*nx by 1 vector
    % dH_i: collection dH_i at each time step
    % (N-1)*nx by nz matrix
    
    %%%% unpack constants
    N = c.N;
    nx = c.nx;
    nu = c.nu;
    dt = c.dt;

    %%%% init
    h = zeros((N-1)*nx, 1);
    dH = zeros((N-1)*nx, N*(nx + nu));

    %%%% compute dynamics constraint (control points) at each time step
    for i=1:(N-1)
        % locate the states in z
        [x_1_inds, u_1_inds] = z_index(i, nx, nu);
        [x_2_inds, u_2_inds] = z_index(i+1, nx, nu);

        % fit h_i and dH_i into vectors
        [h_i,dH_i] = dyConGradient(z(x_1_inds), z(u_1_inds), z(x_2_inds), z(u_2_inds), dt, p);
        h((i-1)*nx+1:i*nx) = h_i;
        dH((i-1)*nx+1:i*nx,(i-1)*(nx+nu)+1:(i+1)*(nx+nu))= dH_i;
    end
    h = h*10;
    dH = dH*10;
end